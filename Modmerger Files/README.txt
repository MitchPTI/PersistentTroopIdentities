SHOULD I EVEN BE READING THIS?

Hi, you've obviously noticed that there's something here called "Modmerger" and are very interested in it. I'd like to note first of all that the name can be rather misleading and a lot of people tend to think it must be a tool that will let them easily merge mods together without any expertise in creating mods. This is unfortunately not even remotely true. If you do not already understand how the module system works and have never used it before, this is not going to help you. Merging mods is actually even MORE complicated than creating them. If you aren't already familiar with the module system, please start learning about it here: https://forums.taleworlds.com/index.php?topic=240255.0 and understand that this is not going to be a quick process. If you're just now starting to learn what the module system even is, you are not going to be ready to merge mods by the end of the day.

WHAT IS MODMERGER?

Modmerger is a framework that allows mods to be (relatively) easily integrated by keeping the changes a mod introduces kept in separate files. For example, instead of directly editing module_scripts.py to introduce new scripts used by Persistent Troop Identity (or edit existing ones), this can be done via the file pti_scripts.py. If somebody then wants to add Persistent Troop Identities to their own mod, they can simply run the modmerger installation and add pti_scripts.py to their source code. This might seem to contradict the message above about merging being complicated, but the above steps rarely result in a successful merge on their own; something will probably go wrong and it'll be up to you to figure out what and how to fix it. What's cool about modmerger is that it makes it easy to organise your code; you know that the Persistent Troop Identities code is in the pti files, the freelancer code is in the freelancer files, etc.

The extremely important thing to note with this mod is that I have actually created my own alternative to modmerger, which I've called mod_manager. This mod_manager framework is installed by default and will accomplish the exact same thing as above. So why have I bothered adding these modmerger files? Well, if somebody is already using the modmerger framework to bring in other mods, then it's a lot easier for them to have Persistent Troop Identities be compatible with this system than to have them install mod_manager on top of modmerger.

WHICH SHOULD I USE, MODMERGER OR MOD_MANAGER?

It's complicated, but probably modmerger unless you really know what you're doing and plan to do some actual python coding. The benefits of mod_manager over modmerger are that instead of everything being stored simply as lists of tuples, there are actually classes for all the object types (animation, dialog, game menu, script, etc) and these objects are stored in ordered dictionaries with the IDs being the key, making it very easy to retrieve and modify a specific object. This is great if, for example, you want to inject new menu options into the camp menu or append new code to the end of a particular script without completely overriding the entire object. If that sounds like something you plan to do, consider giving it a go. It shouldn't be too hard to adapt modmerger files to mod_manager files; most modmerger files are the most basic kind that simply declare new objects and these will work with mod_manager automatically so long as you add the prefix to mod_manager_options. If the modmerge function is actually used, this will have to be replaced with a merge function that instead of taking in a dictionary takes in custom container of mod objects that functions as both a list and ordered dictionary. I leave it up to you to experiment with that if you wish.

TL;DR: if the above was a confusing read, use modmerger.

HOW EXACTLY DO I USE MODMERGER?

Depends a bit on how you're approaching your mod. If you're using this mod as your base, then copy EVERYTHING in this folder (including the module_*.py files) into the parent folder. With that done, you're good to go.

If you're merging this into an existing mod and don't have modmerger installed already, then you'll want to copy across all the modmerger_*.py and util_.* files (and modmerger.py obviously), but NOT the module_*.py files. You'll also need to add the pti_*.py and gpu_*.py files from the above directory (and if you desire overhead stabs, you can add the upstab_*.py files). Once you've added those, run modmerger_installer.py and follow the prompts to install.

If you already have modmerger installed in your mod, then just copy across the pti_*.py and gpu_*.py files (and upstab_*.py if desired) and edit your existing modmerger_options.py to include "pti", "gpu" and "upstab" if applicable to mods_active. I STRONGLY RECOMMEND ADDING THESE AT THE END OF THE LIST. Many mods that use modmerger simply overwrite entire scripts with fresh new ones and this could eliminate crucial changes made by Persistent Troop Identities. This is not a concern in the other direction; the pti files inject code into the existing scripts where necessary and strictly avoid overwriting them entirely.